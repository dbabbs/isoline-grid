{"version":3,"sources":["here.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["hereCredentials","hereIsolineUrl","coords","options","concat","mode","traffic","range","type","maxIsolineRangeLookup","time","distance","MapContainer","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDrag","coordinates","marker","current","leafletElement","getLatLng","index","lat","lng","React","createRef","inherits","createClass","key","value","react_default","a","createElement","Map","center","zoom","parseInt","zoomControl","attributionControl","TileLayer","url","style","Marker","position","draggable","onDragEnd","ref","polygon","length","Polygon","positions","color","Component","App","updateIsolines","promises","state","maps","map","m","fetch","then","x","json","Promise","all","res","copy","i","response","isoline","component","shape","split","setState","componentDidMount","slice","hasOwnProperty","handleFormChange","event","option","target","id","name","_this2","max","sliderVal","className","htmlFor","onChange","toLocaleString","min","MapContainer_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f36308f.chunk.js","sourcesContent":["export const hereCredentials = {\n  id: \"7Fs4xShlBdXXSRhSKKjv\",\n  code: \"9KLK-ZDQIbNbYFcQYM5uVQ\",\n};\n\nexport const hereIsolineUrl = (coords, options) =>\n  `https://isoline.route.api.here.com/routing/7.2/calculateisoline.json?app_id=${hereCredentials.id}&app_code=${hereCredentials.code}&mode=shortest;${options.mode};traffic:${options.traffic}&start=geo!${coords[0]},${coords[1]}&range=${options.range}&rangetype=${options.type}`;\n\nexport const hereTileUrl = (style) =>\n  `https://2.base.maps.api.here.com/maptile/2.1/maptile/newest/${style}/{z}/{x}/{y}/512/png8?app_id=${hereCredentials.id}&app_code=${hereCredentials.code}&ppi=320`;\n\nexport const maxIsolineRangeLookup = {\n  time: 5000,\n  distance: 80000,\n};\n","import React from 'react';\nimport { Map, TileLayer, Marker, Polygon } from 'react-leaflet';\nimport { hereTileUrl } from './here';\n\n\nexport class MapContainer extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.marker = React.createRef();\n   }\n\n   handleDrag = () => {\n      const coordinates = this.marker.current.leafletElement.getLatLng();\n      this.props.handleDrag(this.props.index, [coordinates.lat, coordinates.lng]);\n   }\n\n   render() {\n      return (\n            <Map\n               center={this.props.center}\n               zoom={parseInt(this.props.options.zoom)}\n               zoomControl={false}\n               attributionControl={this.props.index === 8}\n            >\n               <TileLayer\n                  url={hereTileUrl(this.props.style)}\n               />\n               <Marker\n                  position={this.props.center}\n                  draggable={true}\n                  onDragEnd={this.handleDrag}\n                  ref={this.marker}\n\n               />\n               {\n                  this.props.polygon.length > 0 &&\n                  <Polygon\n                     positions={this.props.polygon}\n                     color=\"#2DD5C9\"\n                  />\n               }\n            </Map>\n      )\n   }\n}\n","import React from 'react';\nimport './App.css';\nimport { MapContainer } from './MapContainer';\nimport { hereIsolineUrl, maxIsolineRangeLookup } from './here';\n\nclass App extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n\n         //Coordinates are in format [Latitude, Longitude]\n         maps: [\n            {\n               name: 'Seattle, WA',\n               coordinates: [47.605779, -122.315744],\n               polygon: []\n            }, {\n               name: 'San Francisco, CA',\n               coordinates: [37.761732, -122.440343],\n               polygon: []\n            }, {\n               name: 'New York City, NY',\n               coordinates: [40.734238, -73.988188],\n               polygon: []\n            }, {\n               name: 'Berlin, Germany',\n               coordinates: [52.520609, 13.409321],\n               polygon: []\n            }, {\n               name: 'Chicago, IL',\n               coordinates: [41.884314, -87.630478],\n               polygon: []\n            }, {\n               name: 'Singapore, Singapore',\n               coordinates: [1.347920, 103.862097],\n               polygon: []\n            }, {\n               name: 'Buenos Aires, Argentina',\n               coordinates: [-34.609855, -58.443259],\n               polygon: []\n            }, {\n               name: 'Johannesburg, South Africa',\n               coordinates: [-26.205689, 28.042450],\n               polygon: []\n            }, {\n               name: 'Sydney, Australia',\n               coordinates: [-33.865143, 151.209900],\n               polygon: []\n            }\n         ],\n         options: {\n            zoom: 10,\n            type: 'distance',\n            range: 10000,\n            mode: 'car',\n            traffic: 'disabled',\n            style: 'reduced.night'\n         }\n      }\n   }\n\n   updateIsolines = () => {\n      const promises = this.state.maps.map(m => fetch(hereIsolineUrl(m.coordinates, this.state.options)).then(x => x.json()));\n      Promise.all(promises).then(res => {\n\n         const copy = this.state.maps.map((x, i) => {\n            if (res[i].response.isoline[0].component.length > 0) {\n               x.polygon = res[i].response.isoline[0].component[0].shape.map(x => [x.split(',')[0], x.split(',')[1]]);\n            } else {\n               x.polygon = [];\n            }\n            return x;\n         });\n\n         this.setState({\n            maps: copy\n         });\n      })\n   }\n\n   componentDidMount = () => {\n      this.updateIsolines();\n   }\n\n   handleDrag = (index, coordinates) => {\n      fetch(hereIsolineUrl(coordinates, this.state.options))\n      .then(res => res.json())\n      .then(res => {\n\n         const copy = this.state.maps.slice();\n         if (res.hasOwnProperty('response')) {\n            copy[index].polygon = res.response.isoline[0].component[0].shape.map(x => [x.split(',')[0], x.split(',')[1]]);\n         } else {\n            copy[index].polygon = [];\n         }\n         copy[index].coordinates = coordinates;\n         this.setState({\n            maps: copy\n         });\n      });\n   }\n\n   handleFormChange = (event) => {\n\n      const option = event.target.id;\n      const value = event.target.value;\n\n      const copy = this.state.options;\n      if (option === 'type' && this.state.options.range > maxIsolineRangeLookup[value]) {\n         copy.range = maxIsolineRangeLookup[value];\n      }\n      copy[option] = value;\n      this.setState({\n         options: copy\n      }, () => {\n         this.updateIsolines();\n      });\n\n   }\n\n   render() {\n\n      const max = this.state.options.type === 'distance' ?\n         maxIsolineRangeLookup.distance :\n         maxIsolineRangeLookup.time;\n\n      const sliderVal = this.state.options.range > max ? max : this.state.options.range;\n\n      return (\n         <div className=\"app\">\n            <div className=\"controls\">\n               <div>\n                  <label htmlFor=\"type\">Distance or Time</label>\n                  <select\n                     id=\"type\"\n                     value={this.state.options.type}\n                     onChange={this.handleFormChange}\n                  >\n                     <option value=\"time\">Seconds</option>\n                     <option value=\"distance\">Meters</option>\n                  </select>\n\n               </div>\n               <div>\n                  <label htmlFor=\"range\">\n                     Range ({parseInt(this.state.options.range).toLocaleString()})\n                  </label>\n                  <input\n                     id=\"range\"\n                     onChange={this.handleFormChange}\n                     type=\"range\"\n                     min=\"1\"\n                     max={max}\n                     value={sliderVal}\n                  />\n               </div>\n               <div>\n                  <label htmlFor=\"mode\">Mode</label>\n                  <select\n                     id=\"mode\"\n                     onChange={this.handleFormChange}\n                     value={this.state.options.mode}\n                  >\n                     <option value=\"car\">Car</option>\n                     <option value=\"pedestrian\">Pedestrian</option>\n                  </select>\n               </div>\n               <div>\n                  <label htmlFor=\"traffic\">Traffic</label>\n                  <select\n                     id=\"traffic\"\n                     onChange={this.handleFormChange}\n                     value={this.state.options.traffic}\n                  >\n                     <option value=\"enabled\">Traffic Enabled</option>\n                     <option value=\"disabled\">Traffic Disabled</option>\n                  </select>\n               </div>\n               <div>\n                  <label htmlFor=\"zoom\">Zoom Level ({this.state.options.zoom})</label>\n                  <input\n                     id=\"zoom\"\n                     onChange={this.handleFormChange}\n                     type=\"range\"\n                     min=\"1\"\n                     max=\"16\"\n                     value={this.state.options.zoom}\n                  />\n               </div>\n               <div>\n                  <label htmlFor=\"style\">Map Style</label>\n                     <select\n                        id=\"style\"\n                        onChange={this.handleFormChange}\n                        value={this.state.options.style}\n                     >\n                        <option value=\"reduced.day\">Reduced Day </option>\n                        <option value=\"reduced.night\">Reduced Night</option>\n                        <option value=\"normal.day\">Normal Day</option>\n                        <option value=\"normal.night\">Normal Night</option>\n                     </select>\n               </div>\n            </div>\n            <div className=\"map-grid\">\n               {this.state.maps.map((map, index) =>\n                  <MapContainer\n                     key={index}\n                     index={index}\n                     center={map.coordinates}\n                     options={this.state.options}\n                     handleDrag={this.handleDrag}\n                     polygon={map.polygon}\n                     style={this.state.options.style}\n                  />\n               )}\n\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}